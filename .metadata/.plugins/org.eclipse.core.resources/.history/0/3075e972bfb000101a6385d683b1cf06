package com.ofss.service;

import com.ofss.model.Account;
import com.ofss.repository.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private RestTemplate restTemplate;

    private final String kycVerificationMsUrl = "http://localhost:8081/api/kyc-verification/latest-status/";

    @PersistenceContext
    private EntityManager entityManager;

    public ResponseEntity<?> createAccount(Long customerId, String accountType) {
        try {
            // 1️⃣ Check latest KYC status from KYC Verification MS
            ResponseEntity<Map> response = restTemplate.getForEntity(
                    kycVerificationMsUrl + customerId, Map.class
            );

            if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                return ResponseEntity.badRequest().body("KYC status not found for customer.");
            }

            String latestStatus = String.valueOf(response.getBody().get("status"));
            if (!"APPROVED".equalsIgnoreCase(latestStatus)) {
                return ResponseEntity.badRequest().body("Cannot create account: Latest KYC not approved.");
            }

            // 2️⃣ Prevent duplicate account type for same customer
            Optional<Account> existing = accountRepository.findByCustomerIdAndAccountType(customerId, accountType);
            if (existing.isPresent()) {
                return ResponseEntity.badRequest().body("Customer already has an account of this type.");
            }

            // 3️⃣ Generate 12-digit mock account number
            String accountNumber = "AC" + (100000000000L + Math.abs(new Random().nextLong() % 900000000000L));

            // 4️⃣ Get account ID from Oracle 11g sequence
            Long accountId = ((Number) entityManager.createNativeQuery("SELECT SEQ_ACCOUNT_NEW.NEXTVAL FROM dual")
                    .getSingleResult()).longValue();

            // 5️⃣ Save account
            Account account = new Account();
            account.setAccountId(accountId);
            account.setCustomerId(customerId);
            account.setAccountType(accountType);
            account.setAccountStatus("ACTIVE");
            account.setAccountNumber(accountNumber);
            account.setCreatedDate(LocalDateTime.now());

            accountRepository.save(account);

            return ResponseEntity.ok(account);

        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error creating account: " + e.getMessage());
        }
    }
}
