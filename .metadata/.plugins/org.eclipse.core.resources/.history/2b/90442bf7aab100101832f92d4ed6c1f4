package com.ofss.service;

import com.ofss.model.KycVerification;
import com.ofss.repository.KycVerificationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
public class KycVerificationService {

    @Autowired
    private KycVerificationRepository verificationRepository;

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private RestTemplate restTemplate;

    @Value("${EMAIL_USERNAME}")
    private String username;

    @Value("${kycDocumentMs.url}")
    private String kycDocumentMsUrl;

    @Value("${customerMs.url}")
    private String customerMsUrl;

    // ✅ Verify KYC and update Document MS accordingly
    public KycVerification verifyKyc(Long kycId, String verifiedBy, String status, String remarks) {

        KycVerification verification = new KycVerification();
        verification.setKycId(kycId);
        verification.setVerifiedBy(verifiedBy);
        verification.setStatus(status.toUpperCase());
        verification.setRemarks(remarks);
        verification.setVerificationDate(new Date());

        KycVerification savedVerification = verificationRepository.save(verification);

        // ✅ Update status in Document MS
        try {
            ResponseEntity<Map> kycResponse = restTemplate.getForEntity(
                    kycDocumentMsUrl + kycId, Map.class);

            if (kycResponse.getStatusCode().is2xxSuccessful() && kycResponse.getBody() != null) {
                Map kycDoc = kycResponse.getBody();
                Long customerId = Long.valueOf(String.valueOf(kycDoc.get("customerId")));

                String newDocStatus;
                boolean reuploadFlag;

                switch (status.toUpperCase()) {
                    case "APPROVED" -> {
                        newDocStatus = "APPROVED";
                        reuploadFlag = false;
                    }
                    case "REJECTED" -> {
                        newDocStatus = "REUPLOAD_REQUIRED";
                        reuploadFlag = true;
                    }
                    default -> {
                        newDocStatus = "PENDING_VERIFICATION";
                        reuploadFlag = false;
                    }
                }

                // ✅ Update Document MS with new status
                restTemplate.put(kycDocumentMsUrl + "update-status/" + customerId,
                        Map.of("status", newDocStatus, "reupload", reuploadFlag));

                // ✅ Send Email (only for APPROVED or REJECTED)
                ResponseEntity<Map> customerResponse =
                        restTemplate.getForEntity(customerMsUrl + customerId, Map.class);

                if (customerResponse.getStatusCode().is2xxSuccessful() && customerResponse.getBody() != null) {
                    Map customer = customerResponse.getBody();
                    String customerEmail = String.valueOf(customer.get("email"));
                    if (customerEmail != null && !customerEmail.isEmpty() &&
                            ("APPROVED".equalsIgnoreCase(status) || "REJECTED".equalsIgnoreCase(status))) {
                        sendStatusEmail(customerEmail, status, remarks);
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error updating KYC Document or sending email: " + e.getMessage());
        }

        return savedVerification;
    }

    private void sendStatusEmail(String toEmail, String status, String remarks) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(username);
            message.setTo(toEmail);
            message.setSubject("KYC Verification " + status);
            message.setText("Dear Customer,\n\nYour KYC has been " + status +
                    ".\nRemarks: " + remarks +
                    "\n\nRegards,\nKYC Verification Team");

            mailSender.send(message);
        } catch (Exception e) {
            System.err.println("Error sending email: " + e.getMessage());
        }
    }

    public List<KycVerification> getVerificationHistory(Long kycId) {
        return verificationRepository.findByKycIdOrderByVerificationDateAsc(kycId);
    }

    public String getLatestStatus(Long kycId) {
        return verificationRepository.findByKycIdOrderByVerificationDateDesc(kycId)
                .stream()
                .findFirst()
                .map(KycVerification::getStatus)
                .orElse(null);
    }
}
