package com.ofss.service;

import com.ofss.model.KycVerification;
import com.ofss.repository.KycVerificationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
public class KycVerificationService {

    @Autowired
    private KycVerificationRepository verificationRepository;

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private RestTemplate restTemplate;

    @Value("${EMAIL_USERNAME}")
    private String username;

    @Value("${kycDocumentMs.url}")
    private String kycDocumentMsUrl;

    @Value("${customerMs.url}")
    private String customerMsUrl;

    // ✅ Verify KYC and update Document MS accordingly
    public KycVerification verifyKyc(Long kycId, String verifiedBy, String status, String remarks) {

        KycVerification verification = new KycVerification();
        verification.setKycId(kycId);
        verification.setVerifiedBy(verifiedBy);
        verification.setStatus(status.toUpperCase());
        verification.setRemarks(remarks);
        verification.setVerificationDate(new Date());

        KycVerification savedVerification = verificationRepository.save(verification);

        // ✅ Update status in Document MS and send email
        try {
            ResponseEntity<Map> kycResponse = restTemplate.getForEntity(
                    kycDocumentMsUrl + kycId, Map.class);

            if (kycResponse.getStatusCode().is2xxSuccessful() && kycResponse.getBody() != null) {
                Map kycDoc = kycResponse.getBody();
                Long customerId = Long.valueOf(String.valueOf(kycDoc.get("customerId")));

                String newDocStatus;
                boolean reuploadFlag;

                switch (status.toUpperCase()) {
                    case "APPROVED" -> { newDocStatus = "APPROVED"; reuploadFlag = false; }
                    case "REJECTED" -> { newDocStatus = "REUPLOAD_REQUIRED"; reuploadFlag = true; }
                    default -> { newDocStatus = "PENDING_VERIFICATION"; reuploadFlag = false; }
                }

                // Update Document MS
                HttpHeaders headers = new HttpHeaders();
                headers.set("Content-Type", "application/json");
                restTemplate.exchange(
                        kycDocumentMsUrl + "update-status/" + customerId,
                        HttpMethod.PUT,
                        new HttpEntity<>(Map.of("status", newDocStatus, "reupload", reuploadFlag), heade
